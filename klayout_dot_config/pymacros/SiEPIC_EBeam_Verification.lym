<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SiEPIC: Verification and Netlist generation</description>
 <version>0.1.2</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>V</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Verification

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements layout verification and netlist extraction


Version history:

Lukas Chrostowski 2015/11/11
 - Optical_net class
 - find all LayerSi paths and waveguides, and save optical net vertices 
 - find all PinRec paths
 - find all DevRec polygons and boxes
 - check_waveguides
   - waveguide bend minimum
   - paths with corners (more than 2 points)
   - bend radius less than specified
 - error marker layer and class; clear errors

Lukas Chrostowski 2015/11/12
 - determining where pins/waveguides overlap to generate a netlist
 - initial Spice output for components including waveguides and nets.
 - check nets &amp; components
   - incorrect number of nets connected to a component (disconnected, or too many)
 
Lukas Chrostowski           2015/11/15
 - fix for Python 3.4: print ("xxx")
 - moved some functions from here, to the common "SiEPIC_EBeam_functions file, so they are accessible elsewhere.
 - added pin# text label on PinRec layer; sort pins in Spice output using these names.

Lukas Chrostowski           2015/11/16
 - fixes for component pin_type = Optical IO / FbrTgt being incorrectly handled; added Optical_pin.pin_type

Lukas Chrostowski           2015/11/17
 - debugging &amp; fixing Verification problems

 
"""


import pya
import math
import numpy
import math
import string



def flag_waveguide_error(dpoints, text, optical_waveguide, topcell):
  # global variable "layout_errors" of class "Layout_error" used for storing all the errors.
  a1 = []
  for p in dpoints:
    a1.append (pya.Point(int(p[0]), int(p[1])))
  path = pya.Path(a1, optical_waveguide.wg_width*4/dbu)
  topcell.shapes(LayerErrorN).insert(path)
  x = numpy.array(dpoints)[:,0].mean()*dbu
  y = numpy.array(dpoints)[:,1].mean()*dbu
  layout_errors.append(Layout_error(text, x, y) )
  print (text)
  wtext.insertHtml('%s&lt;br&gt;' %text)


def check_waveguides(optical_waveguides, topcell, error_layer):
  # check waveguides for basic errors.
  num_errors=0

  for o in optical_waveguides:
    found_error = False

    # Check for paths with &gt; 2 vertices
    if (o.wg_type == 0 and o.num_points &gt; 2):
      text = "  *** Layout error.  Waveguide path (%s, %s): Only 2 points allowed in a path. Convert to a waveguide (ROUND_PATH) if necessary. " \
            % ( o.points[0][0]*dbu, o.points[0][1]*dbu) 
      dpoints=n.array(o.points)
      found_error = True
      flag_waveguide_error(dpoints, text, o, topcell)

    # find the minimum segment to make sure that the bends have large enough radius
    if (o.wg_type == 1):
      # first segment:
      segment = distance_xy ( o.points[0], o.points[1] ) 
      if segment &lt; o.radius:
        text =  "  *** Layout warning.  Not enough space (%s) to accommodate the desired bend radius (%s) for waveguide end." % (segment, o.radius)
        dpoints=n.array([ o.points[0], o.points[1] ] )
        found_error = True 
        flag_waveguide_error(dpoints, text, o, topcell)
      # last segment:
      segment = distance_xy ( o.points[len(o.points)-2], o.points[len(o.points)-1] ) 
      if segment &lt; o.radius:
        text =  "  *** Layout warning.  Not enough space (%s) to accommodate the desired bend radius (%s) for waveguide end." % (segment, o.radius)
        dpoints=n.array([ o.points[len(o.points)-2], o.points[len(o.points)-1] ] )
        flag_waveguide_error(dpoints, text, o, topcell)
        found_error = True
      # go through each of the middle segments:
      for j in range(1, len(o.points)-2):
        segment = distance_xy ( o.points[j], o.points[j+1] ) 
        if segment &lt; 2*o.radius and segment != 0:
          text =  "  *** Layout warning.  Not enough space (%s) to accommodate the desired bend radius (%s) for a mid-segment." % (segment, o.radius)
          dpoints=n.array([ o.points[j], o.points[j+1] ] )
          flag_waveguide_error(dpoints, text, o, topcell)
          found_error = True

      # Check for waveguides with too few bend points
      recommended_points = points_per_circle(o.radius)
      if o.bend_pts &lt; 0.75 * recommended_points:
        text =  "  *** Layout warning.  Waveguide bends should have at least %s points per circle for a %s micron radius." \
                     % (int(recommended_points), o.radius)
        dpoints=n.array(o.points)
        found_error = True
        flag_waveguide_error(dpoints, text, o, topcell)
              



def find_all_waveguides(cell, layer):
  # function to traverse the entire layout hierarchy and find all the waveguides 
  # returns array listing all paths
  # Search for ROUND_PATH PCells and straight paths

  # return data containing:
  # - net id: unique identifier for the net
  # - vertices: points that make up the path

  dbu = cell.layout().dbu
  
  iter1 = cell.begin_shapes_rec(layer)
  i=0
  while not(iter1.at_end()):
    i+=1
    found_wg = False
    
    if iter1.shape().is_path():
      # This is a waveguide that is a path.  It should be only a straight line with no bends
      path_obj= iter1.shape()
      wg_path = path_obj.path
      num_points = path_obj.path.num_points()
      if num_points == 2:
        # insert a mid-point in the waveguide, so that it can later be split into two nets
        points = path_to_points(path_obj)
        a1 = []
        count =0
        for p in points:
          a1.append (pya.Point(p[0], p[1]))
          count += 1
          if count == 1:
            # add a point:
            a1.append( pya.Point( (points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2 )  )
        wg_path = pya.Path(a1, path_obj.path.width)
      path = wg_path.transformed(iter1.itrans())   # get the path description        
      # Waveguide parameters
      length =  path.length()*dbu 
      radius = 0
      wg_type = 0
      bend_pts = 0
      wg_width = path.width*dbu
      print ("Waveguide #%s: In cell {%s}, num_points: %s, length: %s, radius: %s, path: %s"  \
           % (i, iter1.cell().name, num_points, length, radius, path) )
      found_wg = True
      
    if iter1.shape().is_polygon():
      if iter1.cell().basic_name() == "ROUND_PATH":
        # This is a waveguide implemented using a PCell ROUND_PATH
        subcell = iter1.cell()        
        # Get the waveguide guiding shape path from the "ROUND_PATH" PCell 
        DPath = subcell.pcell_parameters_by_name()["path"]*(1/dbu)  # DPath object
        ipath = pya.Path.from_dpath(DPath)  # Construct an integer-coordinate path from a floating-point coordinate one

        # Find out the transformation that needs to be performed on the path relative to the top cell
        # and apply this on the waveguide guiding shape path
        trans = iter1.trans() # CplxTrans object of the instance 
        DCplxTrans = pya.DCplxTrans.from_itrans(trans) # need CplxTrans to DCplxTrans
        path = DPath.transformed(DCplxTrans)

        # Waveguide parameters
        print subcell.pcell_parameters_by_name()
        radius = subcell.pcell_parameters_by_name()["radius"]  # in microns
        bend_pts = subcell.pcell_parameters_by_name()["npoints"] 
        wg_width = subcell.pcell_parameters_by_name()['path'].width  # in microns
        # calculate the length of the waveguide using the area / width
        iter2 = cell.begin_shapes_rec(LayerSiN)
        if iter2.shape().is_polygon():
          area = iter2.shape().polygon.area()
          length = area / wg_width * dbu * dbu
        else:
          print "## ROUND_PATH waveguide, not polygon; bug in code? ##"
          length =  path.length()*dbu  # ignoring bends
        num_points = path.num_points()
        wg_type = 1
        print ("Waveguide #%s: In cell {%s}, num_points: %s, length: %s, radius: %s, path: %s" \
            % (i, subcell.name, num_points, length, radius, path) )
        found_wg = True

    if found_wg:
      points = path_to_points(path)  
      print "path: %s, points: %s" % (path, points)
      # save waveguide info into the Optical_waveguide
      optical_waveguides.append ( Optical_waveguide (len(optical_waveguides), points, radius, \
          length, wg_type, num_points, wg_width, bend_pts ) )


    iter1.next()
  print (" ")

def check_components(cell, LayerDevRecN):
  # function to go through all the cells
  # check that the cell has at most ONE DevRec shape.  
  return False
 
  

def check_segments_colinear_overlapping( segment1, segment2 ):
  """ 
  we want to identify ONLY the following situation:
        X  O  X  O
  where XX is a segment, and OO is another segment
  namely, colinear, but also XX overlapping OO
  example usage: 
    a = pya.Point(0,0)
    b = pya.Point(50,0)
    c = pya.Point(50,0)
    d = pya.Point(100,0)
    segment1 = [ a, b ]
    segment2 = [ c, d ]
    print check_segments_colinear_overlapping( segment1, segment2 )
  """  
  # check for one of the segment2 points being inside segment1
  check_between1 = check_point_in_segment( segment1[0], segment1[1], segment2[0] ) | \
                  check_point_in_segment( segment1[0], segment1[1], segment2[1] )
  # check for one of the segment1 points being inside segment2
  check_between2 = check_point_in_segment( segment2[0], segment2[1], segment1[0] ) | \
                  check_point_in_segment( segment2[0], segment2[1], segment1[1] )
  return check_between1 and check_between2


def identify_all_nets(optical_pins, optical_waveguides, optical_components):
  # function to identify all the nets from the layout
  # use the data in Optical_pin, Optical_waveguide to find overlaps
  # and save results in Optical_component

  # Make sure that there are exactly 2 pins for each net (not like in electronics!)

  # Loop through all the pins (p1)
  # - find other overlapping pins (p2)
  # - find overlapping waveguide ends
  for p1 in optical_pins:
    if p1.pin_type != 1:
      continue # only analyze pin_type = 1, component.
    segment1 = [ pya.Point(*p1.points[0]), pya.Point(*p1.points[1]) ] 
    
    # Compare to all other pins:
    for p2 in optical_pins[ p1.index+1: len(optical_pins) ]:
      if p2.pin_type != 1:
        break # only analyze pin_type = 1, component.
      #print ("%s, %s, %s, %s" % (p1.n, p1.points, p2.n, p2.points) )
      segment2 = [ pya.Point(*p2.points[0]), pya.Point(*p2.points[1]) ] 
      check = check_segments_colinear_overlapping( segment1, segment2 )
      if check:  # found connected pins:
        # make a new optical net
        net_index = len(optical_nets)
        optical_nets.append ( Optical_net (net_index, 1, p1.component_n, 1, p2.component_n) )
        # assign this net number to the components
        optical_components[p1.component_n].nets.append (net_index)
        optical_components[p2.component_n].nets.append (net_index)
        # assign this net number to the pins
        p1.net = net_index
        p2.net = net_index
        print ( "connected: pin-pin, net: %s, component #: %s, %s" % (net_index, p1.component_n, p2.component_n) )
        
    # Compare to all waveguides:
    for w1 in optical_waveguides:
      
      print w1.points
      
      # examine the beginning of the waveguide:
      segment2 = [ pya.Point(*w1.points[0]), pya.Point(*w1.points[1]) ] 
      check1 = check_segments_colinear_overlapping( segment1, segment2 )
      if check1:  # found connected pins:
        # make a new optical net
        net_index = len(optical_nets)
        optical_nets.append ( Optical_net (net_index, 1, p1.component_n, 0, w1.index) )
        # assign this net number to the components
        optical_components[p1.component_n].nets.append (net_index)
        if optical_waveguides[w1.index].net1 != -1:
          # problem. Net is already assigned.
          text = "  *** Connectivity error.  Net is already assigned (pin to waveguide). Overwriting."
          flag_waveguide_error( [w1.points[0], w1.points[1]], text, optical_waveguides[w1.index], topcell)
        optical_waveguides[w1.index].net1 = net_index
        # assign this net number to the pin
        p1.net = net_index
        print ( "connected: pin-waveguide, net #: %s, component #: %s, pin #: %s, waveguide #: %s" \
              % (net_index, p1.component_n, p1.index, w1.index ) )
        
      # examine the end of the waveguide:
      np = len(w1.points)
      segment2 = [ pya.Point(*w1.points[np-2]), pya.Point(*w1.points[np-1]) ] 
      check2 = check_segments_colinear_overlapping( segment1, segment2 )
      if check2:  # found connected pins:
        # make a new optical net
        net_index = len(optical_nets)
        optical_nets.append ( Optical_net (net_index, 1, p1.component_n, 0, w1.index) )
        # assign this net number to the components
        optical_components[p1.component_n].nets.append (net_index)
        if optical_waveguides[w1.index].net2 != -1:
          # problem. Net is already assigned.
          text = "  *** Connectivity error.  Net is already assigned (pin to waveguide). Overwriting."
          flag_waveguide_error([w1.points[len(w1.points)-1], w1.points[len(w1.points)-2]], \
                  text, optical_waveguides[w1.index], topcell)
        optical_waveguides[w1.index].net2 = net_index
        # assign this net number to the pin
        p1.net = net_index
        print ( "connected: pin-waveguide, net #: %s, component #: %s, pin #: %s, waveguide #: %s" \
              % (net_index, p1.component_n, p1.index, w1.index ) )
     

  # Check for waveguide to waveguide connections, make net
  # Loop through all waveguides, and compare to all other waveguides
  for w1 in optical_waveguides:
    # the beginning of waveguide 1:
    w1_segment1 = [ pya.Point(*w1.points[0]), pya.Point(*w1.points[1]) ] 
    # the end of waveguide 2:
    np = len(w1.points)
    w1_segment2 = [ pya.Point(*w1.points[np-2]), pya.Point(*w1.points[np-1]) ] 
    for w2 in optical_waveguides[ w1.index+1: len(optical_waveguides) ]:
      # the beginning of waveguide 2:
      w2_segment1 = [ pya.Point(*w2.points[0]), pya.Point(*w2.points[1]) ] 
      # the end of waveguide 2:
      np = len(w2.points)
      w2_segment2 = [ pya.Point(*w2.points[np-2]), pya.Point(*w2.points[np-1]) ] 

      # check 4 possibilities:
      for j in range(0,2):
        if j==0:
          w1_seg=w1_segment1
        else:
          w1_seg=w1_segment2
        for k in range(0,2):
          if k==0:
            w2_seg=w2_segment1
          else:
            w2_seg=w2_segment2
            
          # perform comparison between each of the waveguide ends:
          check = check_segments_colinear_overlapping( w1_seg, w2_seg )
          if check:  # found connected pins:
            # make a new optical net
            net_index = len(optical_nets)
            optical_nets.append ( Optical_net (net_index, 0, w1.index, 0, w2.index) )
            if j==0:
              optical_waveguides[w1.index].net1 = net_index
            else:
              optical_waveguides[w1.index].net2 = net_index
            if k==0:
              optical_waveguides[w2.index].net1 = net_index
            else:
              optical_waveguides[w2.index].net2 = net_index
            print ("connected: waveguide-waveguide")


# end def identify_all_nets



def flag_component_error(box, text, x, y):
  # global variable "layout_errors" of class "Layout_error" used for storing all the errors.
  topcell.shapes(LayerErrorN).insert(box)
  layout_errors.append(Layout_error(text, x, y) )
  print text
  wtext.insertHtml('%s&lt;br&gt;' %text)


def check_connectivity(optical_components, topcell, LayerErrorN):
  # Make sure that all pins/waveguides are connected, i.e., dangling pins/waveguides.
  # Flag disconnected pins
  # Flag disconnected waveguides

  for k in range(0,len(optical_components)):
    if optical_components[k].npins != len(optical_components[k].nets):
      text = "  *** Connectivity error.  Mismatch between the number of pins (%s) on the component (%s, %s) at (%s, %s), and the number of nets (%s)." \
            % ( optical_components[k].npins, optical_components[k].component, optical_components[k].index, \
                optical_components[k].x, optical_components[k].y, len(optical_components[k].nets) )
      bbox = layout.cell(optical_components[k].instance).bbox()
      box = bbox.transformed(pya.Trans(optical_components[k].rotate, optical_components[k].flip, \
                optical_components[k].x/dbu,optical_components[k].y/dbu))
#      flag_component_error(box, text, optical_components[k].x, optical_components[k].y)

      # go through all the pins in the component, and check if they aren't assigned to a net
      for m in range(0,optical_components[k].npins):
        pin = optical_pins[optical_components[k].pins[m]]
        if pin.net == 0 and pin.pin_type == 1:  # disconnected pin on a pin_type = 1 (component)
          text = "  *** Found disconnected pin #%s at (%s, %s)." % (pin.index, pin.x*dbu, pin.y*dbu)
          box = pya.Box(pin.x-3000, pin.y-3000, pin.x+3000, pin.y+3000)
#          flag_component_error(box, text, pin.x*dbu, pin.y*dbu)

  for pin in optical_pins:
    if pin.net == -1 and pin.pin_type != 2:  # disconnected pin not on a pin_type = 2 (optical IO)
      text = "  *** Found disconnected pin #%s, type %s, at (%s, %s), component #%s {%s}" \
          % (pin.index, pin.pin_type, pin.x*dbu, pin.y*dbu, k, optical_components[k].component)
      box = pya.Box(pin.x-3000, pin.y-3000, pin.x+3000, pin.y+3000)
      flag_component_error(box, text, pin.x*dbu, pin.y*dbu)

  for w1 in optical_waveguides:
    # examine the beginning of the waveguide:
    if w1.net1 == -1:
      text = "  *** Found disconnected waveguide at (%s, %s), net1" \
          % (w1.points[0][0]*dbu, w1.points[0][1]*dbu)
      flag_waveguide_error( [w1.points[0], w1.points[1]], text, optical_waveguides[w1.index], topcell)
    # examine the end of the waveguide:
    if w1.net2 == -1:
      text = "  *** Found disconnected waveguide at (%s, %s), net2" \
          % (w1.points[len(w1.points)-1][0]*dbu, w1.points[len(w1.points)-1][1]*dbu)
      flag_waveguide_error([w1.points[len(w1.points)-1], w1.points[len(w1.points)-2]], \
               text, optical_waveguides[w1.index], topcell)



def list_optical_components(optical_components):
  # list all Optical_component objects from an array
  # input array, optical_components
  # example output:         
  # X_grating_coupler_1 N$7 N$6 grating_coupler library="custom/genericcml" sch_x=-1.42 sch_y=-0.265 sch_r=0 sch_f=false

  for o in optical_components:
    nets_str = ""
    for n in o.nets:
      nets_str += " N$" + str(n)
    flip = ' sch_f=true' if o.flip else ''
    if o.rotate &gt; 0:
      rotate = ' sch_r=%s' % str(o.rotate)
    else:
      rotate = ''
#    t = '%s %s %s library="%s" lay_x=%s lay_y=%s sch_x=%s sch_y=%s %s%s'  % \
#         ( "X"+o.component+"_"+str(o.index), nets_str, o.component, o.library, str (o.x * 1e-6), o.y * 1e-6, o.x, o.y, rotate, flip)
    t = '  %s %s %s library="%s" sch_x=%s sch_y=%s %s%s'  % \
         ( "X"+o.component+"_"+str(o.index), nets_str, o.component, o.library, eng_str(o.x * 5e-2), eng_str(o.y * 5e-2), rotate, flip)
    print (t)
    wtext.insertHtml('%s&lt;br&gt;' %t)

import math
def eng_str(x):
    # x input in meters
    # output in meters, engineering notation, rounded to 1 nm
    print x
    x = round(x*1E9)/1E9
    y = abs(x)
    print y
    if y == 0:
      return '0'
    else:
      exponent = int(math.floor(math.log10(y)))
      engr_exponent = exponent - exponent%3
      if engr_exponent == -3:
        str_engr_exponent = "m"
        z = y/10**engr_exponent
      elif engr_exponent == -6:
        str_engr_exponent = "u"
        z = y/10**engr_exponent
      elif engr_exponent == -9:
        str_engr_exponent = "n"
        z = y/10**engr_exponent
      else:
        str_engr_exponent = ""
        z = y/10**engr_exponent
      sign = '-' if x &lt; 0 else ''
      #return sign+str(z)+'E'+str(engr_exponent)
#      return sign+ '%3.3f' % z +str(str_engr_exponent)
      print z
      return sign+ str(z) +str(str_engr_exponent)
    
def list_optical_waveguides(list_optical_waveguides):
  # list all Optical_component objects from an array
  # input array, optical_components
  # example output:         
  # X5 9 10 ebeam_wg_strip_1550 library="Design kits/ebeam_v1.0" wg_length=7.86299e-06 wg_width=5.085e-07 sch_x=-1.42 sch_y=-0.265

  for o in list_optical_waveguides:
    nets_str = "N$%s N$%s" %(o.net1, o.net2)
    x = numpy.array(o.points)[:,0].mean()*dbu
    y = numpy.array(o.points)[:,1].mean()*dbu
#    t = '%s %s %s library="%s" wg_length=%s wg_width=%s lay_x=%s lay_y=%s sch_x=%5.3f sch_y=%5.3f'  % \
#           ( "Xwg" + str(o.index), nets_str, o.component, o.library, eng_str(o.length*1e-6), eng_str(o.wg_width*1e-6), \
#             eng_str(x * 1e-6), eng_str(y * 1e-6), x, y)
    t = '  %s %s %s library="%s" wg_length=%s wg_width=%s sch_x=%s sch_y=%s'  % \
           ( "Xwg" + str(o.index), nets_str, o.component, o.library, \
             eng_str(o.length*1e-6), eng_str(o.wg_width*1e-6), eng_str(x * 5e-2), eng_str(y * 5e-2))
    print (t)
    wtext.insertHtml('%s&lt;br&gt;' %t)
    

def gen_ui():
  global wdg
  if 'wdg' in globals():
    if wdg is not None and not wdg.destroyed():
      wdg.destroy()
  global wtext

  def button_clicked(checked):
    """ Event handler: "OK" button clicked """
    wdg.destroy()

  wdg = pya.QDialog(pya.Application.instance().main_window())

  wdg.setAttribute(pya.Qt.WA_DeleteOnClose)
  wdg.setWindowTitle("SiEPIC-EBeam-PDK Verification and Netlist Generation")

  wdg.resize(1000, 500)
  wdg.move(1, 1)

  grid = pya.QGridLayout(wdg)

  windowlabel1 = pya.QLabel(wdg)
  windowlabel1.setText("Verification output:")
  wtext = pya.QTextEdit(wdg)
  wtext.enabled = True
  wtext.setText('')

  ok = pya.QPushButton("OK", wdg)
  ok.clicked(button_clicked)   # attach the event handler
  netlist = pya.QPushButton("Netlist Export", wdg) # not implemented

  grid.addWidget(windowlabel1, 0, 0, 1, 3)
  grid.addWidget(wtext, 1, 1, 3, 3)
  grid.addWidget(netlist, 4, 2)
  grid.addWidget(ok, 4, 3)

  grid.setRowStretch(3, 1)
  grid.setColumnStretch(1, 1)

  wdg.show()

def make_test_layout(cell, layer):
  delete_extra_top_cells()
  cell.layout().prune_subcells(cell.cell_index(), 10)
  points = [ [0,0], [10,0], [10,10] ]

  cell1 = cell.layout().create_cell("level1")
  trans = pya.Trans(pya.Trans.R90, 0, 0)
  cell.insert(pya.CellInstArray(cell1.cell_index(), trans))
  
  cell2 = cell.layout().create_cell("level2")
  layout_waveguide_abs(cell2, layer, points, 0.5, 3)
  trans = pya.Trans(pya.Point(3000,3000))
  cell1.insert(pya.CellInstArray(cell2.cell_index(), trans))



# ************************************************************************
# ************************************************************************
#  Main script:
# ************************************************************************
# ************************************************************************

# Create a GUI for the output:
gen_ui()
print(wdg)
wtext.insertHtml('Running SiEPIC-EBeam-PDK Verification and Netlist Generation.&lt;br&gt;')


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
layout = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if layout == None:
  raise Exception("No layout")
# find the currently selected cell:
topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
if topcell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = layout.dbu


# Define layers based on PDK_functions:
LayerSiN = layout.layer(LayerSi)
LayerTextN = layout.layer(LayerText)
LayerPinRecN = layout.layer(LayerPinRec)
LayerDevRecN = layout.layer(LayerDevRec)
LayerFbrTgtN = layout.layer(LayerFbrTgt)
LayerErrorN = layout.layer(LayerError)

# Clear the previous errors:
clear_ErrorLayer(topcell, LayerErrorN)

# optional - make a test layout
#make_test_layout(topcell, LayerSi)

# initialize the arrays to keep track of layout objects
reset_Optical_classes()
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []

# Search the layout for the components and waveguides:
print ("")
print ("* calling find_all_components() – DevRec:")
find_all_components(topcell, LayerDevRecN, LayerPinRecN, LayerFbrTgtN)
print ("")
print ("* calling find_all_waveguides():")
find_all_waveguides(topcell, LayerSiN)

print ("")
print ("* print_Optical_all, after find_all_{components, waveguides}:")
print_Optical_all(optical_components, optical_waveguides, optical_pins, optical_nets)

# Search the arrays to identify all the nets:
print ("")
print ("* calling identify_all_nets():")
identify_all_nets(optical_pins, optical_waveguides, optical_components)

print ("")
print ("print_Optical_all, after identify_all_nets:")
print_Optical_all(optical_components, optical_waveguides, optical_pins, optical_nets)

# Check the layout for errors, using the above arrays:
print ("")
print ("Checking layout for errors: ")
wtext.insertHtml('&lt;br&gt;* Checking layout for errors:&lt;br&gt;&lt;br&gt;')
layout_errors=[]
# Check components - overlapping
check_components(topcell, LayerDevRecN)
# Check waveguides for waveguide-specific problems:
check_waveguides(optical_waveguides, topcell, LayerErrorN)
# Check connectivity between components and waveguides:
check_connectivity(optical_components, topcell, LayerErrorN)
lv.add_missing_layers()
print ("*** Number of errors found: %s." % len(layout_errors) )
wtext.insertHtml('&lt;br&gt;*** Number of errors found: %s.&lt;br&gt;' % len(layout_errors) )


# Output the Spice netlist:
wtext.insertHtml('&lt;br&gt;* Spice netlist output:&lt;br&gt;&lt;br&gt;')
print ("")
print ("Spice output: ")
print ("")

def find_optical_IO_pins(optical_pins):
  pins_text = ""
  for p in optical_pins:
    if p.pin_type == 2:
      pins_text += " N$%s" % p.net
  return pins_text
      
wtext.insertHtml('.subckt %s %s:&lt;br&gt;' % ( topcell.name, find_optical_IO_pins(optical_pins) ))
list_optical_components(optical_components)
list_optical_waveguides(optical_waveguides)
wtext.insertHtml('.ends %s&lt;br&gt;' % ( topcell.name) )

# Find the automated measurement coordinates:
wtext.insertHtml('&lt;br&gt;* Automated measurement coordinates:&lt;br&gt;&lt;br&gt;')
print ("")
print ("Automated measurement coordinates: ")
print ("")
t = find_automated_measurement_labels(topcell, LayerTextN)
wtext.insertHtml (t)

# Done
wtext.insertHtml('&lt;br&gt;Done.&lt;br&gt;')
print ("")
print ("Done. ")
print ("")



</text>
</klayout-macro>
