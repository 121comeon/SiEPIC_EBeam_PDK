<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SiEPIC: 2-Waveguide to Path</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Shift+W</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Waveguide_to_Path

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements returns a ROUND_PATH waveguide back to a path 


Version history:

Lukas Chrostowski           2015/11/15
 - Initial version
 - Selected ROUND_PATH waveguides on the silicon layer are converted to paths.

Lukas Chrostowski           2015/11/16
 - Fix bug to include waveguide_to_path transformation of the ROUND_PATH PCell

to do:
 - is the GUIDING_SHAPE is selected, it doesn't work.
 
"""



import pya
import numpy as numpy


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
LayerSiN = ly.layer(LayerSi)
#LayerTextN = ly.layer(LayerText)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)


object_selection = lv.object_selection
for o in object_selection:
  if o.is_cell_inst():
    print ("Selected object is a cell.")
    oinst = o.inst()
    print oinst

# Record a transaction, to enable "undo"
lv.transaction("Waveguide to Path")

# Find the selected paths
object_selection = lv.object_selection
# objects to delete:
to_delete = []
for o in object_selection:
  if o.is_cell_inst():
    print ("Selected object is a cell.")
    oinst = o.inst()
    if oinst.is_pcell():
#      pcell_decl = oinst.pcell_declaration()
      c = oinst.cell
      if c.basic_name() == 'ROUND_PATH' and c.pcell_parameters_by_name()['layer'] == LayerSi:
        print ("ROUND_PATH on LayerSi.")
        path_obj = c.pcell_parameters_by_name()['path']
        print ( path_obj ) 
        wg_width = path_obj.width/dbu
        # convert wg_path (in microns) to database numbers
        wg_path = points_to_path(numpy.array(path_to_Dpoints(path_obj))/dbu, wg_width)
        # get waveguide transformation
        wg_path_trans = wg_path.transformed(oinst.trans)

        print ( wg_path_trans ) 
        new_wg = cell.shapes(LayerSiN).insert(wg_path_trans)

# It would be nice to leave the newly created waveguide selected, to make it obvious to the user.
#        # http://www.klayout.de/doc/code/class_ObjectInstPath.html#method9
#        append_path(const InstElement element)
#        lv.object_selection = ObjectInstPath

#        to_delete.append(oinst.cell) # deleting this removes the cell entirely (which may be used elsewhere!)
        to_delete.append(oinst) # leaves behind the cell if it's not used
        
#        oinst.cell.delete()
#        oinst.delete()

for t in to_delete:
  t.delete()

# Clear the layout view selection, since we deleted some objects (but others may be selected still):
lv.clear_object_selection()
     
# Record a transaction, to enable "undo"
lv.commit()
</text>
</klayout-macro>
