<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SiEPIC: 1-Path to Waveguide</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>W</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Path_to_Waveguide

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements the creation of waveguides, 
searches for closest component pins and snaps to them, and 
registers this for future heal operations.


Version history:

Lukas Chrostowski           2015/11/15
 - Initial version
 - Selected paths are first snapped to the nearest pins, then converted to ROUND_PATH waveguides

Lukas Chrostowski           2015/11/16
 - fixes for Path_to_Waveguide ensuring it doesn't snap both waveguide ends to the same pin

Lukas Chrostowski           2015/11/17
 - Bend radius dialog, first time.
 
"""

import pya
import numpy as numpy


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
SiLayerN = ly.layer(SiLayer)
#LayerTextN = ly.layer(LayerText)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)

# find all pins

# initialize the arrays to keep track of layout objects
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []
reset_Optical_classes()


# Waveguide radius should be specified in the cell in which the Path_to_Waveguide is called
# using a "User Properties" defined via the Cells window.
# if missing, a dialog is presented.
radius_str = cell.property("radius")  
if radius_str:
  radius = float(radius_str)
  print "Radius taken from cell {%s} = %s" % (cell.name, radius)
else:
  radius = pya.InputDialog.ask_double_ex("Bend Radius", "Enter the bend radius (microns):", 5, 1, 500, 3)
  print "Radius taken from the InputDialog = %s; for next time, saved in cell {%s}." % (radius, cell.name)
  cell.set_property("radius", str(radius))
    
# How close must a waveguide be to a pin for it to snap:
waveguide_snap_dist = 10

# Record a transaction, to enable "undo"
lv.transaction("Path to Waveguide")


# Find the selected paths
object_selection = lv.object_selection
# objects to delete:
to_delete = []
for o in object_selection:
  if o.is_cell_inst():
    print ("Selected object is a cell, rather than a path.  Please select a path.")
  else:
    print ("Selected object is a shape")
    if o.shape.is_path():
      # Search the layout for the components and waveguides:
      print ("* calling find_all_components() â€“ DevRec")
      find_all_components(cell, LayerDevRecN, LayerPinRecN, LayerFbrTgtN)
      shape_obj = o.shape
      path_obj = o.shape.path
      num_points = path_obj.num_points()
      points = path_to_points(path_obj)
      if num_points == 2:
        # insert two mid-points in the path so that:
        #  1) it can later be split into two nets
        #  2) to allow for waveguide snapping, move an edge, not just endpoint.
        a1 = []
        count =0
        for p in points:
          a1.append (pya.Point(p[0], p[1]))
          count += 1
          if count == 1:
            # add a point:
            a1.append( pya.Point( (points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2 )  )
            a1.append( pya.Point( (points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2 )  )
        # Update the path
        path_obj = pya.Path(a1, path_obj.width)
        print ("updated path (inserted mid-point): %s" % path_obj )
      # Waveguide parameters
      length =  path_obj.length()*dbu
      wg_type = 0
      bend_pts = 0
      wg_width = path_obj.width*dbu
      # print ( "Waveguide:  num_points: %s, length: %s, radius: %s, path: %s"   % (num_points, length, radius, path_obj) )

      # For both the beginning and end of the path:
      for pin in optical_pins:
        pin.dist = []
      for path_endpoint in [ points[0], points[len(points)-1] ]:
        # Calculate the distnace between every pin and each path endpoint
        for pin in optical_pins:
          # this updates "optical_pins" via the "pin" pointer  
          # print ( "path endpoint: %s, pin %s: %s" % (path_endpoint, pin.n, [pin.x, pin.y] ) )
          pin.dist.append ( distance_xy ( path_endpoint, [pin.x, pin.y] ) ) 
        # Find the closest pin for each path endpoint
      # optical_pins_sorted0[0].dist[0] is the pin distance data sorted in relation to the waveguide beginning:
      optical_pins_sorted0 = sorted(optical_pins, key=lambda  optical_pins0: optical_pins0.dist[0])
      # optical_pins_sorted1[0].dist[1] is the pin distance data sorted in relation to the waveguide end:
      optical_pins_sorted1 = sorted(optical_pins, key=lambda  optical_pins0: optical_pins0.dist[1])
      if len(optical_pins_sorted0) &gt; 0:
        # check if both ends of the waveguide want to snap to the same vertex. If so, pick the closest waveguide end.
        go_wg_beginning = True
        go_wg_end = True
        if optical_pins_sorted0[0].n == optical_pins_sorted1[0].n:
          # same pin!  find the closest one: 
          if optical_pins_sorted0[0].dist[0] &lt; optical_pins_sorted1[0].dist[1]:
            # Beginning is closest, don't touch the end
            go_wg_end = False
          else:
            # End is closest, don't touch the beginning
            go_wg_beginning = False
        if optical_pins_sorted0[0].dist[0] &lt; waveguide_snap_dist and go_wg_beginning:
          # Update the path beginning endpoint to match pin
          points = path_to_points(path_obj)
          # Is this a horizontal or vertical segment; move the whole segment
          if points[0][0] == points[1][0]: 
            # Vertical
            points[1][0] = optical_pins_sorted0[0].x
          if points[0][1] == points[1][1]: 
            # Horizontal
            points[1][1] = optical_pins_sorted0[0].y
          points[0] = [optical_pins_sorted0[0].x, optical_pins_sorted0[0].y]
          a1 = []
          for p in points:
            a1.append (pya.Point(p[0], p[1]))
          # Update the path in the layout
          path_obj = pya.Path(a1, path_obj.width)
          print ("updated path (adjusted beginning point): %s" % path_obj )
        optical_pins_sorted1[0] # pin that is closest to the end of path
        if optical_pins_sorted1[0].dist[1] &lt; waveguide_snap_dist and go_wg_end:
          # Update the path end endpoint to match pin
          points = path_to_points(path_obj)
          # Is this a horizontal or vertical segment; move the whole segment
          if points[len(points)-1][0] == points[len(points)-2][0]: 
            # Vertical
            points[len(points)-2][0] = optical_pins_sorted1[0].x
          if points[len(points)-1][1] == points[len(points)-2][1]: 
            # Horizontal
            points[len(points)-2][1] = optical_pins_sorted1[0].y
          points[len(points)-1] = [optical_pins_sorted1[0].x, optical_pins_sorted1[0].y]
          a1 = []
          for p in points:
            a1.append (pya.Point(p[0], p[1]))
          # Update the path in the layout
          path_obj = pya.Path(a1, path_obj.width)
          print ("updated path (adjusted end point): %s" % path_obj )

      # Convert the path to a waveguide
      wg_path = points_to_Dpath(numpy.array(path_to_points(path_obj))*dbu, wg_width)
      param = { "npoints": points_per_circle(radius), "radius": radius, "path": wg_path, "layer": SiLayer }
      pcell = ly.create_cell("ROUND_PATH", "Basic", param )
      t = pya.Trans(0, 0)
      cell.insert(pya.CellInstArray(pcell.cell_index(), t))
  
# It would be nice to leave the newly created waveguide selected, to make it obvious to the user.
      
      # Mark the path for deletion:
      #shape_obj.delete()
      to_delete.append(shape_obj)

for t in to_delete:
  t.delete()
        
# Clear the layout view selection, since we deleted some objects (but others may be selected still):
lv.clear_object_selection()

# Record a transaction, to enable "undo"
lv.commit()


# Save the optical_waveguides for future heal operations
optical_waveguides_registered = [] # check if this exists...
optical_waveguides_registered.append(optical_waveguides)









</text>
</klayout-macro>
